// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibcbridge/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # proto/tx/message
type MsgSendMsgMintRequest struct {
	Sender           string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Port             string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	ChannelID        string `protobuf:"bytes,3,opt,name=channelID,proto3" json:"channelID,omitempty"`
	TimeoutTimestamp uint64 `protobuf:"varint,4,opt,name=timeoutTimestamp,proto3" json:"timeoutTimestamp,omitempty"`
	Reciever         string `protobuf:"bytes,5,opt,name=reciever,proto3" json:"reciever,omitempty"`
	Amount           uint64 `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Fee              uint64 `protobuf:"varint,7,opt,name=fee,proto3" json:"fee,omitempty"`
	TokenId          uint32 `protobuf:"varint,8,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	SrcChainId       uint32 `protobuf:"varint,9,opt,name=srcChainId,proto3" json:"srcChainId,omitempty"`
	DestChainId      uint32 `protobuf:"varint,10,opt,name=destChainId,proto3" json:"destChainId,omitempty"`
}

func (m *MsgSendMsgMintRequest) Reset()         { *m = MsgSendMsgMintRequest{} }
func (m *MsgSendMsgMintRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSendMsgMintRequest) ProtoMessage()    {}
func (*MsgSendMsgMintRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_543507ca01ae8263, []int{0}
}
func (m *MsgSendMsgMintRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendMsgMintRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendMsgMintRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendMsgMintRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendMsgMintRequest.Merge(m, src)
}
func (m *MsgSendMsgMintRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendMsgMintRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendMsgMintRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendMsgMintRequest proto.InternalMessageInfo

func (m *MsgSendMsgMintRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSendMsgMintRequest) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *MsgSendMsgMintRequest) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func (m *MsgSendMsgMintRequest) GetTimeoutTimestamp() uint64 {
	if m != nil {
		return m.TimeoutTimestamp
	}
	return 0
}

func (m *MsgSendMsgMintRequest) GetReciever() string {
	if m != nil {
		return m.Reciever
	}
	return ""
}

func (m *MsgSendMsgMintRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MsgSendMsgMintRequest) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *MsgSendMsgMintRequest) GetTokenId() uint32 {
	if m != nil {
		return m.TokenId
	}
	return 0
}

func (m *MsgSendMsgMintRequest) GetSrcChainId() uint32 {
	if m != nil {
		return m.SrcChainId
	}
	return 0
}

func (m *MsgSendMsgMintRequest) GetDestChainId() uint32 {
	if m != nil {
		return m.DestChainId
	}
	return 0
}

type MsgSendMsgMintRequestResponse struct {
}

func (m *MsgSendMsgMintRequestResponse) Reset()         { *m = MsgSendMsgMintRequestResponse{} }
func (m *MsgSendMsgMintRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendMsgMintRequestResponse) ProtoMessage()    {}
func (*MsgSendMsgMintRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_543507ca01ae8263, []int{1}
}
func (m *MsgSendMsgMintRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendMsgMintRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendMsgMintRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendMsgMintRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendMsgMintRequestResponse.Merge(m, src)
}
func (m *MsgSendMsgMintRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendMsgMintRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendMsgMintRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendMsgMintRequestResponse proto.InternalMessageInfo

type MsgMintRequest struct {
	Reciever    string `protobuf:"bytes,1,opt,name=reciever,proto3" json:"reciever,omitempty"`
	Amount      uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Fee         uint64 `protobuf:"varint,3,opt,name=fee,proto3" json:"fee,omitempty"`
	TokenId     uint32 `protobuf:"varint,4,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	SrcChainId  uint32 `protobuf:"varint,5,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	DestChainId uint32 `protobuf:"varint,6,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
	Signer      string `protobuf:"bytes,7,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgMintRequest) Reset()         { *m = MsgMintRequest{} }
func (m *MsgMintRequest) String() string { return proto.CompactTextString(m) }
func (*MsgMintRequest) ProtoMessage()    {}
func (*MsgMintRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_543507ca01ae8263, []int{2}
}
func (m *MsgMintRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintRequest.Merge(m, src)
}
func (m *MsgMintRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintRequest proto.InternalMessageInfo

func (m *MsgMintRequest) GetReciever() string {
	if m != nil {
		return m.Reciever
	}
	return ""
}

func (m *MsgMintRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MsgMintRequest) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *MsgMintRequest) GetTokenId() uint32 {
	if m != nil {
		return m.TokenId
	}
	return 0
}

func (m *MsgMintRequest) GetSrcChainId() uint32 {
	if m != nil {
		return m.SrcChainId
	}
	return 0
}

func (m *MsgMintRequest) GetDestChainId() uint32 {
	if m != nil {
		return m.DestChainId
	}
	return 0
}

func (m *MsgMintRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgSendMsgMintRequest)(nil), "rosenlabs.rosenchain.ibcbridge.MsgSendMsgMintRequest")
	proto.RegisterType((*MsgSendMsgMintRequestResponse)(nil), "rosenlabs.rosenchain.ibcbridge.MsgSendMsgMintRequestResponse")
	proto.RegisterType((*MsgMintRequest)(nil), "rosenlabs.rosenchain.ibcbridge.MsgMintRequest")
}

func init() { proto.RegisterFile("ibcbridge/tx.proto", fileDescriptor_543507ca01ae8263) }

var fileDescriptor_543507ca01ae8263 = []byte{
	// 423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x3d, 0x6f, 0xd4, 0x40,
	0x10, 0xbd, 0xbd, 0x3b, 0x2e, 0xb9, 0x81, 0xa0, 0x68, 0x25, 0xd0, 0x2a, 0x82, 0xc5, 0x72, 0x75,
	0x42, 0xc2, 0x96, 0x82, 0x28, 0x69, 0x80, 0xe6, 0x24, 0xdc, 0x18, 0x2a, 0x9a, 0xc8, 0x1f, 0x83,
	0x6f, 0x45, 0xbc, 0x6b, 0x76, 0xd7, 0x28, 0xfc, 0x05, 0x2a, 0xc4, 0x1f, 0xe1, 0x6f, 0x50, 0xa1,
	0x94, 0x94, 0xe8, 0xee, 0x8f, 0x20, 0x8f, 0x72, 0x39, 0x87, 0x18, 0x8a, 0x74, 0xf3, 0xde, 0xbe,
	0xfd, 0x78, 0x6f, 0x76, 0x80, 0xab, 0xbc, 0xc8, 0xad, 0x2a, 0x2b, 0x8c, 0xfd, 0x59, 0xd4, 0x58,
	0xe3, 0x0d, 0x97, 0xd6, 0x38, 0xd4, 0xa7, 0x59, 0xee, 0x22, 0xaa, 0x8a, 0x55, 0xa6, 0x74, 0x74,
	0x29, 0x0c, 0xbf, 0x8f, 0xe1, 0x5e, 0xe2, 0xaa, 0x37, 0xa8, 0xcb, 0xc4, 0x55, 0x89, 0xd2, 0x3e,
	0xc5, 0x8f, 0x2d, 0x3a, 0xcf, 0xef, 0xc3, 0xcc, 0xa1, 0x2e, 0xd1, 0x0a, 0x16, 0xb0, 0xc5, 0x3c,
	0xbd, 0x40, 0x9c, 0xc3, 0xb4, 0x31, 0xd6, 0x8b, 0x31, 0xb1, 0x54, 0xf3, 0x07, 0x30, 0x2f, 0x56,
	0x99, 0xd6, 0x78, 0xba, 0x7c, 0x25, 0x26, 0xb4, 0xb0, 0x23, 0xf8, 0x63, 0x38, 0xf4, 0xaa, 0x46,
	0xd3, 0xfa, 0xb7, 0xaa, 0x46, 0xe7, 0xb3, 0xba, 0x11, 0xd3, 0x80, 0x2d, 0xa6, 0xe9, 0x35, 0x9e,
	0x1f, 0xc1, 0xbe, 0xc5, 0x42, 0xe1, 0x27, 0xb4, 0xe2, 0x16, 0x1d, 0x74, 0x89, 0xbb, 0x17, 0x65,
	0xb5, 0x69, 0xb5, 0x17, 0x33, 0xda, 0x7d, 0x81, 0xf8, 0x21, 0x4c, 0xde, 0x23, 0x8a, 0x3d, 0x22,
	0xbb, 0x92, 0x0b, 0xd8, 0xf3, 0xe6, 0x03, 0xea, 0x65, 0x29, 0xf6, 0x03, 0xb6, 0x38, 0x48, 0xb7,
	0x90, 0x4b, 0x00, 0x67, 0x8b, 0x97, 0x5d, 0x0a, 0xcb, 0x52, 0xcc, 0x69, 0xb1, 0xc7, 0xf0, 0x00,
	0x6e, 0x97, 0xe8, 0xfc, 0x56, 0x00, 0x24, 0xe8, 0x53, 0xe1, 0x23, 0x78, 0x38, 0x18, 0x58, 0x8a,
	0xae, 0x31, 0xda, 0x61, 0xf8, 0x93, 0xc1, 0xdd, 0xbf, 0xb2, 0xec, 0xbb, 0x62, 0xff, 0x74, 0x35,
	0x1e, 0x72, 0x35, 0x19, 0x74, 0x35, 0xbd, 0xea, 0x2a, 0x80, 0x3b, 0xce, 0x16, 0x27, 0xd4, 0xdc,
	0x13, 0x55, 0x52, 0x72, 0x57, 0x7d, 0x85, 0x70, 0xd0, 0x99, 0xd8, 0x49, 0x66, 0xd7, 0x9c, 0x51,
	0xc7, 0x55, 0xa5, 0xd1, 0x52, 0x94, 0x5d, 0xc7, 0x09, 0x1d, 0x7f, 0x63, 0x30, 0x49, 0x5c, 0xc5,
	0xbf, 0x30, 0xe0, 0x03, 0x1f, 0xe5, 0x59, 0xf4, 0xff, 0x3f, 0x16, 0x0d, 0xc6, 0x75, 0xf4, 0xfc,
	0x46, 0xdb, 0xb6, 0x29, 0xbf, 0x78, 0xfd, 0x63, 0x2d, 0xd9, 0xf9, 0x5a, 0xb2, 0xdf, 0x6b, 0xc9,
	0xbe, 0x6e, 0xe4, 0xe8, 0x7c, 0x23, 0x47, 0xbf, 0x36, 0x72, 0xf4, 0xee, 0xb8, 0x52, 0x7e, 0xd5,
	0xe6, 0x51, 0x61, 0xea, 0x98, 0x0e, 0x7e, 0xd2, 0xdd, 0x11, 0xef, 0xee, 0x88, 0xcf, 0xe2, 0xde,
	0xa4, 0x7c, 0x6e, 0xd0, 0xe5, 0x33, 0x9a, 0x96, 0xa7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x6e,
	0x8a, 0x84, 0x84, 0x43, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// this line is used by starport scaffolding # proto/tx/rpc
	SendMsgMintRequest(ctx context.Context, in *MsgSendMsgMintRequest, opts ...grpc.CallOption) (*MsgSendMsgMintRequestResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SendMsgMintRequest(ctx context.Context, in *MsgSendMsgMintRequest, opts ...grpc.CallOption) (*MsgSendMsgMintRequestResponse, error) {
	out := new(MsgSendMsgMintRequestResponse)
	err := c.cc.Invoke(ctx, "/rosenlabs.rosenchain.ibcbridge.Msg/SendMsgMintRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// this line is used by starport scaffolding # proto/tx/rpc
	SendMsgMintRequest(context.Context, *MsgSendMsgMintRequest) (*MsgSendMsgMintRequestResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SendMsgMintRequest(ctx context.Context, req *MsgSendMsgMintRequest) (*MsgSendMsgMintRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsgMintRequest not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SendMsgMintRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendMsgMintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendMsgMintRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rosenlabs.rosenchain.ibcbridge.Msg/SendMsgMintRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendMsgMintRequest(ctx, req.(*MsgSendMsgMintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rosenlabs.rosenchain.ibcbridge.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMsgMintRequest",
			Handler:    _Msg_SendMsgMintRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibcbridge/tx.proto",
}

func (m *MsgSendMsgMintRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendMsgMintRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendMsgMintRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DestChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestChainId))
		i--
		dAtA[i] = 0x50
	}
	if m.SrcChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SrcChainId))
		i--
		dAtA[i] = 0x48
	}
	if m.TokenId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TokenId))
		i--
		dAtA[i] = 0x40
	}
	if m.Fee != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Fee))
		i--
		dAtA[i] = 0x38
	}
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Reciever) > 0 {
		i -= len(m.Reciever)
		copy(dAtA[i:], m.Reciever)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reciever)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChannelID) > 0 {
		i -= len(m.ChannelID)
		copy(dAtA[i:], m.ChannelID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendMsgMintRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendMsgMintRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendMsgMintRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMintRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DestChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestChainId))
		i--
		dAtA[i] = 0x30
	}
	if m.SrcChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SrcChainId))
		i--
		dAtA[i] = 0x28
	}
	if m.TokenId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TokenId))
		i--
		dAtA[i] = 0x20
	}
	if m.Fee != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Fee))
		i--
		dAtA[i] = 0x18
	}
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Reciever) > 0 {
		i -= len(m.Reciever)
		copy(dAtA[i:], m.Reciever)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reciever)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSendMsgMintRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimestamp))
	}
	l = len(m.Reciever)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	if m.Fee != 0 {
		n += 1 + sovTx(uint64(m.Fee))
	}
	if m.TokenId != 0 {
		n += 1 + sovTx(uint64(m.TokenId))
	}
	if m.SrcChainId != 0 {
		n += 1 + sovTx(uint64(m.SrcChainId))
	}
	if m.DestChainId != 0 {
		n += 1 + sovTx(uint64(m.DestChainId))
	}
	return n
}

func (m *MsgSendMsgMintRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMintRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reciever)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	if m.Fee != 0 {
		n += 1 + sovTx(uint64(m.Fee))
	}
	if m.TokenId != 0 {
		n += 1 + sovTx(uint64(m.TokenId))
	}
	if m.SrcChainId != 0 {
		n += 1 + sovTx(uint64(m.SrcChainId))
	}
	if m.DestChainId != 0 {
		n += 1 + sovTx(uint64(m.DestChainId))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSendMsgMintRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendMsgMintRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendMsgMintRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reciever", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reciever = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			m.TokenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			m.SrcChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainId", wireType)
			}
			m.DestChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendMsgMintRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendMsgMintRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendMsgMintRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reciever", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reciever = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			m.TokenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			m.SrcChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainId", wireType)
			}
			m.DestChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
